#+title: xls-parser

The ~xls_parser.py~ "transpiles" the XLS file used by the FAPP
profiler into a =python= script (~xls_parser.out.py~).
~xls_parser.out.py~ mimics the calculations of the original XLS file
(without the need to access to the XLS file or Excel) and outputs the
results into JSON format.

* Generating ~xls_parse.out.py~
  Run ~xls_parse.py /path/to/cpu_pa_report.xlsm~ which will generate
  the ~xls_parse.out.py~ file.

** Important:
   The ~cpu_pa_report.xlsm~ file must already be "loaded"
   (i.e. you must use Excel once, and use the XLSM file with calculated
   values, the ~xls_parse.py~ doesn't work with the "empty"
   ~cpu_pa_report.xlsm~).

** Requirements:
   ~openpyxl~, (e.g. do ~pip install openpyxl~).

* Using ~xls_parse.out.py~
  The generated ~xls_parse.out.py~ can be used to print (in JSON
  format) all the derived counters calculated in the Excel file
  (without the need for the Excel).

  The ~xls_parse.out.py~ has a single input: the path to a directory
  with the ~paX.xml~ files (where ~X=1, ..., 17~) generated using the
  ~fapp~ utility:

  #+begin_src shell
    for i in `seq 1 17`; do
        fapp -C -d ./tmp${i} -Icpupa,nompi -Hevent=pa${i} ${BINARY}
        fapp -A -d ./tmp${i} -Icpupa -txml -o ./pa${i}.xml
    done
  #+end_src

  Note that unlike Excel which reads CSV file, ~xls_parse.out.py~
  reads XLS files.

* Output
  The output is printed to ~stdout~ in JSON format as (nested) dictionaries.

* Motivation
  It is inconvenient to download 17 files (plus the XLS) to a local PC
  to get the desired measurements, especially since profiling is
  rarely done for a single application.  Usually, one does multiple
  measurements to compare different runs/applications, or one is
  attempting to improve an application based on the measurements.
  Using the Excel approach for the first situation is tedious and
  error-prone, and for the second situation extremely frustrating.
