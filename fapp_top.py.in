#! /usr/bin/env python
import argparse
import json
from collections import OrderedDict
from pprint import pprint

# from fapp_loader import FappXml


def add_path(path, key, value, results):
    cur_dict = results
    for p in path:
        if p not in cur_dict:
            cur_dict[p] = OrderedDict()
        cur_dict = cur_dict[p]
    cur_dict[key] = value


def xls_nonempty(ops):
    return [e for e in ops if e != ""]


def xls_sum(ops):
    return sum(map(lambda t: float(t) if t != "" else 0, ops))


def vba_guard_limit_lower(data, flag, lower_limit=1):
    try:
        ddata = float(data)
    except Exception():
        return data
    if flag == 0:
        if ddata < lower_limit:
            ddata = lower_limit
    return ddata


def vba_guard_limit_upper(data, flag, upper_limit=1):
    try:
        ddata = float(data)
    except Exception():
        return data
    if flag == 0:
        if ddata > upper_limit:
            ddata = upper_limit
    return ddata


def flatten(data: OrderedDict) -> list:
    def concat_keys(key, pair):
        return [f"{key.strip()}::{pair[0].strip()}", pair[1]]

    results = []
    for key, value in data.items():
        if isinstance(value, OrderedDict):
            results += [concat_keys(key, pair) for pair in flatten(value)]
        else:
            results.append([key, value])
    return results


def prn_json(results):
    """JSON format"""
    print(json.dumps(results))


def prn_pprint(results):
    """Pretty print results"""
    pprint(results)


def prn_keys(results):
    """Print keys for flattened format (same order as --flat)"""
    flat = flatten(results)
    for pair in flat:
        print(pair[0])


def prn_flat(results):
    """Print data for flattened format (same order as --keys)"""
    flat = flatten(results)
    for pair in flat:
        print(pair[1])


OUTPUT_FUNCS = {
    "json": prn_json,
    "pprint": prn_pprint,
    "keys": prn_keys,
    "flat": prn_flat,
}


def print_output(results, output):
    if output not in OUTPUT_FUNCS.keys():
        opts = ", ".join(OUTPUT_FUNCS.keys()) + ", list"
        msg = f"'{output}' is invalid for --output options.\n"
        msg += f"Acceptable options are: {opts}"
        raise ValueError(msg)

    OUTPUT_FUNCS[output](results)


parser = argparse.ArgumentParser()
parser.add_argument(
    "input_xml_dir",
    help="Path to a directory containing paN.xml files generated using `fapp -txml`",
)
parser.add_argument(
    "--roi",
    help="Region of interest (default: kernel)",
    default="kernel",
)
parser.add_argument(
    "--output",
    help="Different output formats (see --output=list for details)",
    default="json",
)
args = parser.parse_args()

if args.output == "list":
    print("Possible --output options")
    for key, fn in OUTPUT_FUNCS.items():
        print("  {}: {}".format(key, fn.__doc__))
    exit(0)

fapp_xml = FappXml(args.input_xml_dir, args.roi)
results = OrderedDict()

### TOP END ###
